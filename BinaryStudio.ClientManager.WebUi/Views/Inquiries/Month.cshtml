@model MonthViewModel
@{
    ViewBag.Title = String.Format("This Month - {0}", Model.Name);
}

<div id="month" class="container" data-bind="foreach: Weeks">
    <div class="week row" data-bind="foreach: Days">
        <div class="day">
           <title data-bind="text: DateStringForMonth"></title>
            <ul data-bind="foreach: Inquiries">
                <li data-bind="visible: Visible,attr: {'class': 'inquiry day-' + day}, css:{'hidden-inquiry': isHidden,'hide': isHidden}">
                    <a data-bind="text: Name, attr:{href: DetailsUri}"></a>
                </li>
            </ul>
            <div style="text-align: center; margin-bottom: 8px">
                <input type="button" class="btn btn-primary btn-mini" data-bind="attr: {id: 'button-'+DateString}, visible: isToggle, click: toggleList" value="More"/> @*onclick="isHiddengleList('#hideme', this)"/>*@
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function toggleList(day) {
        var selector = '.day-' + new Date(day.DateString).getDate() + '.hidden-inquiry';
        $(selector).slideToggle();
        var buttonSelector = '#button-' + day.DateString;
        $(buttonSelector).val($(buttonSelector).val() == 'More' ? 'Less' : 'More');
    }
</script>

<script type="text/javascript">
    $(function () {
        var viewModel = @Html.ToJson(Model);
        viewModel.Filter = ko.observable();
        for (var weekIndex in viewModel.Weeks) {
            var week = viewModel.Weeks[weekIndex];
            for (var dayIndex in week.Days) {
                var day = week.Days[dayIndex];
                               
                for (var inquiryIndex in day.Inquiries) {
                    var inquiry = day.Inquiries[inquiryIndex];
                
                    inquiry.day = new Date(day.DateString).getDate();
                    
                    inquiry.isHidden = ko.computed(function() {
                        return inquiryIndex > viewModel.MaxInquiriesWithoutToggling ? true : false;
                    });
                    
                    inquiry.Visible = ko.computed(function() {
                        if (!this.Filter() || this.Filter().length == 0) {
                            return true;
                        }
                        var localInquiry = this.Inquiry;
                        for (var property in localInquiry) {
                            if (localInquiry.hasOwnProperty(property) &&
                                String(localInquiry[property]).contains(this.Filter())) {
                                return true;
                            }
                        }
                        return false;
                    }, {
                        Filter: viewModel.Filter,
                        Inquiry: inquiry
                    });
                }
                
                day.visibleInquiriesCount = ko.computed(function() {
                    var inquiriesCount = 0;
                    for (var inquiryIndex in this.Inquiries) {
                        var inquiry = this.Inquiries[inquiryIndex];
                        if (inquiry.Visible()) {
                            inquiriesCount++;
                        }
                    }
                    return inquiriesCount;
                },day);
                
                day.isToggle = ko.computed(function() {
                    if (this.visibleInquiriesCount()>viewModel.MaxInquiriesWithoutToggling+1) {
                        return true;
                    }
                    return false;
                },day);
            }
        }
        ko.applyBindings(viewModel);
    });    

</script>
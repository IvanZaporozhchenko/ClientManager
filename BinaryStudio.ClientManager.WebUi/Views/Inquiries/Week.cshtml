@model WeekViewModel

@{
    ViewBag.Title = "This Week";
}

@helper MoveForward(string text, DateTime date, int inquiryId)
{
    <li><a href="#" onclick="OnClickMoveTo(@inquiryId,'@date.ToString("yyyy-MM-dd")')"><span class="icon-arrow-right"></span> @text (@date.ToString("dd.MM"))</a></li>
}

@Html.Partial("_Alert")

<div id="week" class="container" data-bind="foreach: Days">
    <div class="day">
        <ul data-bind="foreach: Inquiries">
            <title data-bind="text: Name"></title>
            <li class="inquiry" data-bind="visible: Visible">
                <span data-bind="text: Subject"></span>
            </li>
        </ul>
    </div>
        @*foreach (var day in Model.Days)
    {
        <div class="day">
            <ul>
                <title>@day.Name (@day.Date.ToString("dd.MM"))</title>
                @foreach (var inquiry in day.Inquiries)
                {
                    
                    @*Html.Partial("_Inquiry",
                                        new InquiryPartialViewModel
                                            {
                                                Inquiry = inquiry,
                                                Employees = Model.Employees,
                                                Tags = Model.Tags
                                            })
                }
            </ul>
        </div>
    }*@
</div>

@Html.Partial("_CommentEditor")

<script type="text/javascript">
    $(function() {
        var viewModel = @Html.ToJson(Model);
        viewModel.Filter = ko.observable();

        for (var dayIndex in viewModel.Days) {
            var day = viewModel.Days[dayIndex];
            for (var inquiryIndex in day.Inquiries) {
                var inquiry = day.Inquiries[inquiryIndex];
                inquiry.Visible = ko.computed(function() {
                    if (!this.Filter() || this.Filter().length == 0) {
                        return true;
                    }
                    var localInquiry = this.Inquiry;
                    for (var property in localInquiry) {
                        if (localInquiry.hasOwnProperty(property) &&
                            String(localInquiry[property]).contains(this.Filter())) {
                            return true;
                        }
                    }
                    return false;
                }, {
                    Filter: viewModel.Filter,
                    Inquiry: inquiry
                });
            }
        }

        ko.applyBindings(viewModel);
    });
    
</script>